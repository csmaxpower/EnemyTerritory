//=============================================================================
//
//  Santa's Grotto 1.2 - santas_grotto_v1_2
//
//  Who         When            What
//-----------------------------------------------------------------------------
//  Mateos      -               Updated waypoint mapping
//                              + Goals conversion/management + Routing
//  Mateos      21/04/2010      Added _goals.gm file
//                              Routing to secure the Key Card
//
//=============================================================================

/****************************************************
Path mapping updated and script by Mateos
Correspondant WAY file size: -
Last update: 29th January 2018
****************************************************/

/*
 * TODO List:
 * - Test for stuckage;
 * - Expand goal management with attack/defend spots, dynamite covering,
 *   use of heavy weapons and arty, for both teams, if possible (cf. map layout)
 */

 global Spawns =
 {
    OLD_FISHING_HOUSE = 1,
    LANCASTER_BOMBER_DEPLOYMENT = 2,

    /**
     * Axis only, available after the First Gate is destroyed,
     * then is unavailable once the Key is secured at the Second Gate.
     */
    WORKSHOP = 3,

    NORTH_POLE = 4,
    FACTORY = 5,
    GARAGE = 6,
    ELF_S_HUT = 7,

    GetAxisReinforceTime = function()
    {
        foreach ( id and bot in BotTable )
        {
            if ( bot.GetTeam() == TEAM.AXIS )
            {
                return bot.GetReinforceTime();
            }
        }
    },

    SetSpawn = function( team, spawn, selfkill )
    {
        foreach ( bot in BotTable )
		{
			if ( bot.GetTeam() == team )
            {
                bot.ChangeSpawnPoint( spawn );

                if ( selfkill )
                {
                    bot.ExecCommand( "kill" );
                }
            }
		}
    },
 };

global Map =
{
    Debug = 0,  // Please set to zero before distributing your script

    isFuseBoxBuilt = false,
    isSackStolen = false,
    northPoleTeam = TEAM.AXIS,

    // From alchemycastle_b3.gm by palota
	NavDoor = function( _this )
	{
		wpinfo = _this.navigation.wpinfo;
		if ( wpinfo == null )
		{
			wpinfo = Util.WpNameInfo( _this.CurrentNavigation );
			_this.navigation.wpinfo = wpinfo;
		}

		pos = wpinfo.position;
		vec = wpinfo.facing.Normalize();

        pos1 = pos - vec * 50;
		pos1 = Vector3( pos1.x, pos1.y, pos.z );

        pos2 = pos + vec * 140;
		pos2 = Vector3( pos2.x, pos2.y, pos.z );

		for ( i = 0; i < 4; i += 1 )
		{
			if ( _this.Goto(pos) == EVENT.PATH_FAILED )
			{
				return;
			}

			_this.AddAimRequest( Priority.High, "facing", wpinfo.facing );
			tr = TraceLine( pos, pos2, null, TRACE.SOLID, 0, true );

			if ( tr.fraction == 1 )
			{
				_this.Bot.MoveTowards( pos2 );
				sleep( 0.8 );
				break;
			}

			sleep(0.1);

			_this.Bot.PressButton( BTN.USE );
			_this.Bot.MoveTowards( pos1 );

			// Wait while door opens
			sleep(1);
		}
	},

    // Paththrough Navigational
    Navigation =
	{
        // One-way door
        cp_door =
		{
			navigate = function( _this ) { Map.NavDoor( _this ); },
		},

        jump =
        {
            navigate = function( _this )
            {
                // Since this kind of navigation doesn't work well with waypoints
                wpTable = {};
				Wp.GetWaypointByName( "top", wpTable );

                // With a good jump while going forward to pass the 2 steps
                _this.AddAimRequest( Priority.High, "facing", wpTable.facing );
 				_this.Bot.HoldButton( BTN.FORWARD, 1 );

                _this.Bot.HoldButton( BTN.JUMP, 0.5 );
            },
        },
	},

    Roles =
    {
        AXIS =
        {
            // North Pole flag
            DEFENDER =
            {
                voice = "defend",   // Signals voice chat to randomly announce
                numbots = 2,        // Maximum of 2 bots
                MinBotsForRole = 5, // Only assign this role if there are already 5 Axis bots in game
            },
        },
    },

    // *** TRIGGER CALLBACKS ***
    Allies_Command_Post_Built = function( trigger )
    {
        Util.MapDebugPrint( "Allies_Command_Post_Built" );
    },

    Axis_Command_Post_Built = function( trigger )
    {
        Util.MapDebugPrint( "Axis_Command_Post_Built" );
    },

    Fuse_Box_Built = function( trigger )
    {
        Map.isFuseBoxBuilt = true;

        Wp.SetWaypointFlag( "3rd_door_1", "axis", false );
        Wp.SetWaypointFlag( "3rd_door_2", "axis", false );

        Goals.Second_Gate( false );

        // They'll spawn at the Elf's Hut otherwise
        // Move there only if the Sack isn't in the nature
        // Also handle a few goals
        if ( !Map.isSackStolen )
        {
            Spawns.SetSpawn( TEAM.AXIS, Spawns.FACTORY, false );
            Goals.Factory( true );
        }
        else
        {
            Goals.Santa_S_Grotto( true );
        }

        // *** ALLIED GOALS ***
        SetAvailableMapGoals( TEAM.ALLIES, true, {
        	"CAPPOINT_sackdest",
        	"FLAG_sack",
        });

        Util.MapDebugPrint( "Fuse_Box_Built" );
    },

    Allies_Command_Post_Destroyed = function( trigger )
    {
        Util.MapDebugPrint( "Allies_Command_Post_Destroyed" );
    },

    Axis_Command_Post_Destroyed = function( trigger )
    {
        Util.MapDebugPrint( "Axis_Command_Post_Destroyed" );
    },

    First_Gate_Destroyed = function( trigger )
    {
        // blockwall flags refresh
        sleep( 1 );

        Util.EnableGoal( "ATTACK_SG.*" );
        Util.DisableGoal( "ATTACK_Gate1.*" );

        Cabinets.Old_Fishing_House( false );
        Cabinets.Garage( true );

        SetAvailableMapGoals( TEAM.ALLIES, true, {
        	"FLAG_gate_key",
        	"CAPPOINT_Secondgate",
        });

        Util.MapDebugPrint( "First_Gate_Destroyed" );
    },

    gate_key_Taken = function( trigger )
    {
        Util.EnableGoal( "ATTACK_SFB.*" );
        Util.DisableGoal( "ATTACK_SG.*" );

        Util.MapDebugPrint( "gate_key_taken" );
    },

    gate_key_returned = function( trigger )
    {
        Util.EnableGoal( "ATTACK_SG.*" );
        Util.DisableGoal( "ATTACK_SFB.*" );

        Util.MapDebugPrint( "gate_key_returned" );
    },

    sack_Taken = function( trigger )
    {
        Map.isSackStolen = true;

        // Move Axis to Elf's Hut spawn, and selfkill if the spawn time is equal or below 5 seconds
        axisReinforceTime = Spawns.GetAxisReinforceTime();
        selfkill = axisReinforceTime <= 5;
        Util.MapDebugPrint( "Axis reinforce time: " + axisReinforceTime + " => Suicide: " + selfkill, true );
        Spawns.SetSpawn( TEAM.AXIS, Spawns.ELF_S_HUT, selfkill );

        if ( Map.isFuseBoxBuilt )
        {
            Goals.Factory( false );
            Goals.Santa_S_Grotto( true );
        }
        else
        {
            // If the Fuse Box isn't built when this event is triggered,
            // it means a human player bypassed the protected door to steal the objective...
            // Allied bots will keep their goals as is then (because reachability), but not Axis!
            SetAvailableMapGoals( TEAM.AXIS, false, ".*" );
            SetAvailableMapGoals( TEAM.AXIS, true, "ATTACK_SD.*" );
        }

        Util.MapDebugPrint( "sack_taken" );
    },

    sack_returned = function( trigger )
    {
        Map.isSackStolen = false;

        Goals.Santa_S_Grotto( false );

        // Consider that Allies can only bypass the Second Gate door,
        // since they're all covi-protected;
        // so it only depends on the Fuse Box status
        if ( Map.isFuseBoxBuilt )
        {
            Spawns.SetSpawn( TEAM.AXIS, Spawns.FACTORY, false );

            Goals.Factory( true );
        }
        else
        {
            if ( Map.northPoleTeam == TEAM.AXIS )
            {
                Spawns.SetSpawn( TEAM.AXIS, Spawns.NORTH_POLE, false );
            }
            else
            {
                Spawns.SetSpawn( TEAM.AXIS, Spawns.FACTORY, false );
            }

            // Just re-enable what was disabled for Axis
            Util.EnableGoal( "ATTACK_TG.*" );
            Util.EnableGoal( "CHECKPOINT_.*" );

            Cabinets.North_Pole( true );
        }

        Util.MapDebugPrint( "sack_returned" );
    },

    Secondgate_Captured = function( trigger )
    {
        // blockwall flags refresh
        sleep( 1 );

        Util.EnableGoal( "ATTACK_TG.*" );
        Util.EnableGoal( "CHECKPOINT_.*" );
        Util.DisableGoal( "ATTACK_SFB.*" );

        Cabinets.Garage( false );
        Cabinets.North_Pole( true );

        SetAvailableMapGoals( TEAM.ALLIES, true, {
        	"BUILD_Fuse_Box",
        	"ATTACK_northpole",
        });
        SetAvailableMapGoals( TEAM.ALLIES, false, "CAPPOINT_Secondgate" );

        Util.MapDebugPrint( "Secondgate_Captured" );
    },

    sackdest_Captured = function( trigger )
    {
        Util.MapDebugPrint( "sackdest_Captured" );
    },

    north_pole_flag_Axis_Captured = function( trigger )
    {
        Map.northPoleTeam = TEAM.AXIS;

        SetAvailableMapGoals( TEAM.AXIS, false, "ATTACK_northpole" );

        SetAvailableMapGoals( TEAM.ALLIES, true, "ATTACK_northpole" );

        Util.MapDebugPrint( "north_pole_flag_Axis_Captured" );
    },

    north_pole_flag_Allies_Captured = function( trigger )
    {
        Map.northPoleTeam = TEAM.ALLIES;

        SetAvailableMapGoals( TEAM.AXIS, true, "ATTACK_northpole" );

        SetAvailableMapGoals( TEAM.ALLIES, false, "ATTACK_northpole" );

        Util.MapDebugPrint( "north_pole_flag_Allies_Captured" );
    },
};

global OnMapLoad = function()
{
    // *** TRIGGERS ***
    OnTrigger( "Allied Command Post constructed. Charge speed increased!", Map.Allies_Command_Post_Built );
    OnTrigger( "Axis Command Post constructed. Charge speed increased!", Map.Axis_Command_Post_Built );
    OnTrigger( "^1Fuse Box has been repaired", Map.Fuse_Box_Built );
    OnTrigger( "Axis team has destroyed the Allied Command Post!", Map.Allies_Command_Post_Destroyed );
    OnTrigger( "Allied team has destroyed the Axis Command Post!", Map.Axis_Command_Post_Destroyed );
    OnTrigger( "^1Allies have blown the First Gate!", Map.First_Gate_Destroyed );
    OnTrigger( "^1Key for the Second Gate has been stolen by Allies!", Map.gate_key_Taken );
    OnTrigger( "^1Key for the Second Gate has been returned to the House!", Map.gate_key_returned );
    OnTrigger( "^1Allies have got Santa's Sack!", Map.sack_Taken );
    OnTrigger( "^1Santa's Sack has been taken back to the Factory!", Map.sack_returned );
    OnTrigger( "^1Second Gate open!", Map.Secondgate_Captured );    // ^1Second Gate Key has been secured, Second Gate opening!
    OnTrigger( "^1Santa's Sack has been returned to Santa, Christmas can continue! :D", Map.sackdest_Captured );
    OnTrigger( "^1Axis have captured the North Pole!", Map.north_pole_flag_Axis_Captured );
    OnTrigger( "^1Allies have Captured the North Pole!", Map.north_pole_flag_Allies_Captured );

    // *** CLEAR ALL GOALS AND ROLES FOR BOTH TEAMS ***
    Util.DisableGoal( ".*", true ); // All but Routes
    ClearGoalRole( ".*", { ROLE.DEFENDER } );

    Cabinets.Old_Fishing_House( true );

    // *** AXIS GOALS ***
    SetAvailableMapGoals( TEAM.AXIS, true, "ATTACK_Gate.*" );

    // *** ALLIED GOALS ***
    SetAvailableMapGoals( TEAM.ALLIES, true, {
    	"ATTACK_Gate.*",
    	"PLANT_First_Gate",
    });

    // *** GOALS PROPERTIES ***
    Wp.SetWaypointFlag( "3rd_door_1", "axis", true );
    Wp.SetWaypointFlag( "3rd_door_2", "axis", true );

    Util.ExcludeClass( "MOUNTMG42_.*", TEAM.AXIS, CLASS.MEDIC, CLASS.ENGINEER );
    Util.ExcludeClass( "MOUNTMG42_.*", TEAM.ALLIES, CLASS.MEDIC, CLASS.ENGINEER );
    Util.SetMaxUsersInProgress( 2, "ATTACK_northpole" );

    SetGoalPriority( "ATTACK_northpole", 0.51 );
    SetMapGoalProperties( "ATTACK_.*",      { DisableCM = 1, MinCampTime = 20, MaxCampTime = 42 } );
    SetMapGoalProperties( "MOUNTMG42_.*",   { MinCampTime = 15, MaxCampTime = 60 } );

    // *** ROLES ***
    SetGoalRole( "CHECKPOINT_north_pole_flag", ROLE.DEFENDER );

    Util.MapDebugPrint( "Omni-Bot 0.8x map script for Santa's Grotto 1.2 by Mateos executed." );
};

global OnBotJoin = function( bot )
{
    bot.MaxViewDistance = 1000.0;
    bot.TargetBreakableDist = 300.0;
};

global Goals =
{
    Second_Gate = function( bAvailability )
    {
        Cabinets.North_Pole( bAvailability );

        if ( bAvailability )
        {
            Util.EnableGoal( "ATTACK_TG.*" );
        }
        else
        {
            Util.DisableGoal( "ATTACK_TG.*" );
        }

        SetAvailableMapGoals( TEAM.ALLIES, bAvailability, {
            "ATTACK_northpole",
            "BUILD_Fuse_Box",
        });
    },

    Factory = function( bAvailability )
    {
        Cabinets.Factory( bAvailability );
        Cabinets.Command_Post( bAvailability );

        if ( bAvailability )
        {
            Util.EnableGoal( "ATTACK_Sack.*" );
            Util.EnableGoal( "BUILD_Command_Post" );
            Util.EnableGoal( "PLANT_Command_Post" );
        }
        else
        {
            Util.DisableGoal( "ATTACK_Sack.*" );
            Util.DisableGoal( "BUILD_Command_Post" );
            Util.DisableGoal( "PLANT_Command_Post" );
        }

        SetAvailableMapGoals( TEAM.AXIS, bAvailability, {
            "MOUNTMG42_Factory_MG",
            "REPAIRMG42_Factory_MG",
        });
    },

    Santa_S_Grotto = function( bAvailability )
    {
        if ( bAvailability )
        {
            Util.EnableGoal( "ATTACK_SD.*" );
        }
        else
        {
            Util.DisableGoal( "ATTACK_SD.*" );
        }
    },
};

global InitializeRoutes = function()
{
    MapRoutes =
    {
        CAPPOINT_sackdest =
		{
			ROUTE_Sack =
			{
				ROUTE_Sack_Back1 =
				{
                    Weight = 4, // Prefer ROUTE_Sack_Back1 4 times more
					ROUTE_Sack_Back2 =
					{
						ROUTE_Sack_Junction1  =
						{
							ROUTE_Sack_Junction2 = {},
						},
					},
				},
				ROUTE_Sack_Low_Left =
                {
                    Weight = 2, // Prefer ROUTE_Sack_Low_Left twice more
                    ROUTE_Sack_Junction1  =
                    {
                        ROUTE_Sack_Junction2 = {},
                    },
                },
				ROUTE_Sack_Low_Right =
                {
                    ROUTE_Sack_Junction1  =
                    {
                        ROUTE_Sack_Junction2 = {},
                    },
                },
			},
		},

        CAPPOINT_Secondgate =
        {
            ROUTE_GateKeyTaken =
            {
                ROUTE_KeyToSafe1 =
                {
                    ROUTE_KeyToSafe2 =
                    {
                        ROUTE_KeyToSafe3 =
                        {
                            ROUTE_KeyToSafe4 =
                            {
                                ROUTE_KeyToSafe5 =
                                {
                                    ROUTE_KeyToSafe6 =
                                    {
                                        ROUTE_KeyToSafe7 =
                                        {
                                            ROUTE_KeySecured = {},
                                        },
                                    },
                                },
                            },
                        },
                    },
                },
            },
        },

        PLANT_First_Gate =
        {
            ROUTE_LancasterDeploymentSpawn =
            {
                ROUTE_Sea1 =
                {
                    ROUTE_Sea2 = {},
                },
            },
        },
    };

    // Copy routes
	MapRoutes.ATTACK_Gate1a = MapRoutes.PLANT_First_Gate;
    MapRoutes.ATTACK_Gate1c = MapRoutes.PLANT_First_Gate;

    Util.Routes(MapRoutes);
};

global Cabinets =
{
    Lancaster = function( bAvailability )
    {
        SetAvailableMapGoals( TEAM.ALLIES, bAvailability, {
            "AMMOCAB_t6",
            "HEALTHCAB_t7",
        });
    },

    Old_Fishing_House = function( bAvailability )
    {
        if ( bAvailability )
        {
            Util.EnableGoal( "AMMOCAB_t2" );
            Util.EnableGoal( "HEALTHCAB_t1" );
        }
        else
        {
            Util.DisableGoal( "AMMOCAB_t2" );
            Util.DisableGoal( "HEALTHCAB_t1" );
        }
    },

    Garage = function( bAvailability )
    {
        if ( bAvailability )
        {
            Util.EnableGoal( "AMMOCAB_t19" );
            Util.EnableGoal( "HEALTHCAB_t20" );
        }
        else
        {
            Util.DisableGoal( "AMMOCAB_t19" );
            Util.DisableGoal( "HEALTHCAB_t20" );
        }
    },

    North_Pole = function( bAvailability )
    {
        if ( bAvailability )
        {
            Util.EnableGoal( "AMMOCAB_t22" );
            Util.EnableGoal( "HEALTHCAB_t23" );
        }
        else
        {
            Util.DisableGoal( "AMMOCAB_t22" );
            Util.DisableGoal( "HEALTHCAB_t23" );
        }
    },

    Factory = function( bAvailability )
    {
        if ( bAvailability )
        {
            Util.EnableGoal( "AMMOCAB_t25" );
            Util.EnableGoal( "HEALTHCAB_t26" );
        }
        else
        {
            Util.DisableGoal( "AMMOCAB_t25" );
            Util.DisableGoal( "HEALTHCAB_t26" );
        }
    },

    Command_Post = function( bAvailability )
    {
        if ( bAvailability )
        {
            Util.EnableGoal( "AMMOCAB_t66" );
            Util.EnableGoal( "HEALTHCAB_t67" );
        }
        else
        {
            Util.DisableGoal( "AMMOCAB_t66" );
            Util.DisableGoal( "HEALTHCAB_t67" );
        }
    },
};
